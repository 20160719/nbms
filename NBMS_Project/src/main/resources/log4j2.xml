<?xml version="1.0" encoding="UTF-8"?>
<!--
   og4j 2可以定时检测配置文件的变化
   <Configuration monitorInterval="30"> 
      通过设置monitorInterval属性，即可设置log4j 2自动检测配置文件的时间间隔（单位：秒），最小间隔为5秒 -->
	
<configuration status="debug">
	<properties>
		<!--日志目录 -->
		<property name="loghome">/log</property>
		<!--文件名称 -->
		<property name="gogal">gogal</property>
		<property name="gogal_name">${gogal}.log</property>

	</properties>
	<!--先定义所有的appender -->
	<appenders>
		<!--这个输出控制台的配置 -->
		<Console name="Console" target="SYSTEM_OUT">
			<!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
			<ThresholdFilter level="trace" onMatch="ACCEPT"
				onMismatch="DENY" />
			<PatternLayout
				pattern="%d{HH:mm:ss.SSS} %-5level %class{36}.%M()/%L  - %msg%xEx%n" />
		</Console>
	</appenders>

	<!--然后定义logger，只有定义了logger并引入的appender，appender才会生效 -->
	<loggers>

		<!--建立一个默认的root的logger -->
		<root level="info">
			<appender-ref ref="${gogal}" />
			<appender-ref ref="Console" />
		</root>
		<root level="debug">
			<appender-ref ref="${gogal}" />
			<appender-ref ref="Console" />
		</root>

	</loggers>


	<!-- 1、FileAppender 普通地输出到本地文件 2、FlumeAppender 将几个不同源的日志汇集、集中到一处。 3、JMSQueueAppender 
		VS. JMSTopicAppender 与JMS相关的日志输出 4、RewriteAppender 对日志事件进行掩码或注入信息 5、RollingFileAppender 
		对日志文件进行封存（详细） 6、RoutingAppender 在输出地之间进行筛选路由 7、SMTPAppender 将LogEvent发送到指定邮件列表 
		8、SocketAppender 将LogEvent以普通格式发送到远程主机 9、SyslogAppender 将LogEvent以RFC 5424格式发送到远程主机 
		10、AsynchAppender 将一个LogEvent异步地写入多个不同输出地 11、ConsoleAppender 将LogEvent输出到命令行 
		12、FailoverAppender 维护一个队列，系统将尝试向队列中的Appender依次输出LogEvent，直到有一个成功为止 -->
</configuration>